1. Настройка физической репликации двумя кластерами базы данных. Кластеры main и replica будут находиться на одной виртуальной машине (работа через WSL). 

В файле конфигурации для main, установим listen_addresses='localhost'
Создадим пользователя для подключения
create user replicator with replication encrypted password 'password'

Создадим кластер для реплики:
sudo pg_createcluster 14 replica 

Удалим директорию pgdata из реплики 
rm -rf /var/lib/postgresql/14/replica/*

С помощью pg_basebackup перенесем резервную копию из main в replica
pg_basebackup -h 127.0.0.1 -U replicator -p 5433 -D /var/lib/postgresql/14/replica -Fp -Xs -P -R

Добавим параметр hot_standby в конфигурацию реплики, чтобы она могла принимать запросы после восстановления
echo 'hot_standby = on' >> /var/lib/postgresql/14/replica/postgresql.auto.conf

Запустим реплику
pg_ctlcluster 14 replica start

Проверяем, 
pg_lsclusters
14  main    5432 online          postgres /var/lib/postgresql/14/main    /var/log/postgresql/postgresql-14-main.log
14  replica 5433 online,recovery postgres /var/lib/postgresql/14/replica /var/log/postgresql/postgresql-14-replica.log

select pg_is_in_recovery() возвращает true для false, и true для реплики. 

На основном сервере создадим репликационный слот:
pg_create_physical_replication_slot('rep_slot');

На реплике добавим в postgresql.conf параметр
primary_slot_name = 'rep_slot'

Также установим параметр recovery_min_apply_delay, чтобы реплика отставала от основного сервера
recovery_min_apply_delay = '5min'


2. Создание логической репликации
Уберем слот репликации из параметров postgresql.conf реплики и удалим его на основном сервере
select pg_drop_replication_slot('rep_slot');

На основном сервере изменим параметр wal_level
alter system set wal_level = logical;

Перезапустим 
pg_ctlcluster 14 main restart

Создадим кластер для логической репликации и запустим его
sudo pg_createcluster 14 logical
sudo pg_ctlcluster 14 logical start

На основном кластере создадим базу данных lrep_db и таблицу
create database lrep_db;
\c lrep_db; 
create table t(id serial primary key, s text);

Создадим такую же базу данных и таблицу на втором кластере
create database lrep_db;
\c lrep_db; 
create table t(id int primary key, s text);

Создаем публикацию на основном кластере
create publication my_pub for table t with (publish = 'insert, update, delete, truncate');

Создаем подписку на втором кластере
create subscription my_sub 
connection 'host=localhost port=5432 user=replicator password=password dbname=lrep_db' 
publication my_pub 
with(connect = true, enabled = true, create_slot = true, slot_name = my_sub, synchronous_commit='off');

Добавим тестовые данные на основном сервере
insert into t(s) values ('test');

Проверяем на втором кластере
insert into t(s) values ('test');
Данные получены. 
